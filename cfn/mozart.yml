AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Mozart data service stack. The stack name is implicitly used as the name of the 
  EKS cluster and the MSK cluster created by the stack.
Parameters:
  S3Bucket:
    Description: S3 bucket name, which must be 3 to 63 characters long
    Type: String
    AllowedPattern: '[a-zA-Z0-9][a-zA-Z0-9-\.]{2,62}'

  DesktopRemoteAccessCIDR:
    Description: Remote access Ip V4 CIDR
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    Type: String

  DesktopType:
    Description: Graphical desktop, or headless desktop
    Default: "Graphical"
    Type: String
    AllowedValues:
      - "Graphical"
      - "Headless"
  
  DataClientType:
    Description: Kafka and RosBridge support, or RosBridge support only.
    Default: "RosBridge"
    Type: String
    AllowedValues:
      - "KafkaAndRosBridge"
      - "RosBridge"
      
  VpcCIDR:
    Default: 172.30.0.0/16
    Description: (Advanced) Vpc CIDR. Do not use 192.168.0.0 range.
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    Type: String

  VpcPublicSubnet1CIDR:
    Default: 172.30.0.0/24
    Description: (Advanced) Public Subnet1 CIDR inside VpcCIDR
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    Type: String

  VpcPublicSubnet2CIDR:
    Default: 172.30.1.0/24
    Description: (Advanced) Public Subnet2 CIDR inside VpcCIDR
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    Type: String

  VpcPublicSubnet3CIDR:
    Default: 172.30.2.0/24
    Description: (Advanced)  Public Subnet3 CIDR inside VpcCIDR
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    Type: String

  VpcPrivateSubnet1CIDR:
    Default: 172.30.64.0/18
    Description: (Advanced)  Private Subnet1 CIDR inside VpcCIDR
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    Type: String

  VpcPrivateSubnet2CIDR:
    Default: 172.30.128.0/18
    Description: (Advanced)  Private Subnet2 CIDR inside VpcCIDR
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    Type: String

  VpcPrivateSubnet3CIDR:
    Default: 172.30.192.0/18
    Description: (Advanced)  Private Subnet2 CIDR inside VpcCIDR
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    Type: String

  RedshiftDatabaseName:
    Description: Redshift database name
    Type: String
    Default: mozart
    AllowedPattern: "([a-z]|[0-9])+"

  RedshiftServerlessBaseCapacity:
    Description: Redshift serverless base capacity in RPUs
    Type: Number
    Default: 128
    MinValue: 128

  RedshiftWorkgroup:
    Description: Redshift serverless workgroup
    Type: String
    Default: "mozart"
    AllowedPattern: "([a-z]|[0-9])+"

  RedshiftNamespace:
    Description: Redshift serverless namespace
    Type: String
    Default: "mozart"
    AllowedPattern: "([a-z]|[0-9])+"

  RedshiftMasterUsername:
    Description: The user name that is associated with the master user account for
      the Redshift cluster that is being created
    Type: String
    Default: admin 
    AllowedPattern: "([a-z])([a-z]|[0-9])*"

  RedshiftMasterUserPassword: 
    AllowedPattern: "(?=^.{8,}$)(?=.*\\d)(?=.*[A-Z])(?=.*[a-z]).*$"
    Description: "Resdhift master password: Atleast length 8, lower case, upper case and digits."
    NoEcho: "true"
    Type: String
    
  MSKBrokerNodeType:
    Description: The type of node to be provisioned for MSK Broker
    Type: String
    Default: kafka.m5.large
    AllowedValues:
    - kafka.m5.large
    - kafka.m5.2xlarge
    - kafka.m5.4xlarge
    
  MSKNumberOfNodes:
    Description: The number of MSK Broker nodes, must be >= 3
    Type: Number
    Default: 3
    MinValue: 3

  FSxForLustre:
    Description: >-
      Option to enable, disable FSx for Lustre file system. If enabled, 
      the FSx for Lustre file system automatically imports data from s3://S3bucket/FSxS3ImportPrefix. 
      See S3Bucket and FSxS3ImportPrefix parameters.
    Type: String
    Default: 'disabled'
    AllowedValues:
      - 'enabled'
      - 'disabled'

  FSxStorageCapacityGiB:
    Description: FSx Storage capacity in multiples of 2400 GiB
    Type: Number
    MinValue: 2400
    Default: 7200

  FSxS3ImportPrefix:
    Description: (Optional) FSx S3 prefix for importing data
    Type: String
    AllowedPattern: '^(?!/)[a-zA-Z0-9-_\./]*'
    Default: ""

  EKSEncryptSecretsKmsKeyArn:
    Description: Encrypt EKS Secrets Key ARN (Leave blank to create)
    Type: String
    Default: ""

  KubernetesVersion:
    Description: Kubernetes Version
    Type: String
    AllowedValues: [ "1.28" ]
    Default: "1.28"

  KubectlVersion:
    Description: Kubectl Version
    Type: String
    AllowedValues: [ "1.28.3/2023-11-14" ]
    Default: "1.28.3/2023-11-14"
  
  EKSNodeVolumeSizeGiB:
    Description: EKS Node volume size GiB
    Type: Number
    MinValue: 200
    Default: 200
  
  EKSWorkNodeGroupMaxSize:
    Description: EKS work node group maximum size
    Type: Number
    MinValue: 2
    Default: 16
  
  EKSSystemNodeGroupInstanceTypes:
    Description: EKS system node group instance types
    Type: CommaDelimitedList
    Default: "t3a.small,t3a.medium,t3a.large,m5a.large,m7a.large"

  EKSWorkNodeGroupInstanceTypes:
    Description: EKS work node group instance types
    Type: CommaDelimitedList
    Default: "m5a.8xlarge,m5.8xlarge,m5n.8xlarge,m7a.8xlarge,r5n.8xlarge"
  
  EKSSystemNodeGroupCapacityType:
    Description: EKS system node group capacity type
    Type: String
    Default: "SPOT"
    AllowedValues:
    - "ON_DEMAND"
    - "SPOT"

  EKSWorkNodeGroupCapacityType:
    Description: EKS work node group capacity type
    Type: String
    Default: "SPOT"
    AllowedValues:
    - "ON_DEMAND"
    - "SPOT"
   
  UbuntuAMI:
    Description: >-
      Advanced option to override Ubuntu AMI. 
      ROS1 'noetic' requires Ubuntu 20.04, and ROS2 'humble' requires Ubuntu 22.04.
    Type: String
    AllowedPattern: '(ami-[0-9a-z]{17})?'

  DesktopInstanceType:
    Description: >-
     EC2 instance type for desktop.
    Type: String
    Default: g4dn.xlarge
    AllowedValues:
      - m5n.xlarge
      - m5n.2xlarge
      - m5n.4xlarge
      - g3s.xlarge
      - g3.4xlarge
      - g4dn.xlarge
      - g4dn.2xlarge
      - g4dn.4xlarge
     
    ConstraintDescription: Must be a valid EC2 instance type.
  
  DesktopEbsVolumeSize:
    Description: Desktop EBS volume size (GiB) 
    Type: Number
    MinValue: 200
    Default: 200

  DesktopEbsVolumeType:
    Default: 'gp3'
    Description: Desktop EBS volume type
    Type: String
    AllowedValues:
      - 'gp2'
      - 'gp3'

  KeyPairName:
    Description: EC2 SSH KeyPair Name
    Type: 'AWS::EC2::KeyPair::KeyName'
    AllowedPattern: '^[\x00-\x7F]{1,255}[^.\s]$'

  DesktopHasPublicIpAddress:
    Description: Should a Public Ip Address be associated with the Desktop?
    Type: String
    Default: "true"
    AllowedValues:
     - "true"
     - "false"

  RosVersion:
    Description: >-
     ROS version. For ROS1, use 'noetic'. For ROS2, use 'humble'. 
    Type: String
    Default: "humble"
    AllowedValues:
     - "noetic"
     - "humble"

  FargateComputeMax:
    Description: Maximum size of compute environment in vCpus
    Type: Number
    Default: 1024
  
  FargateComputeType:
    Description: Fargate compute type
    Type: String
    Default: "FARGATE"
    AllowedValues:
      - "FARGATE_SPOT"
      - "FARGATE"
       

Conditions:
  CreateEksKey: !Equals [ !Ref EKSEncryptSecretsKmsKeyArn, "" ]
  OverrideAMI: !Not 
    - !Equals 
      - !Ref UbuntuAMI
      - ''
  MSKEnabled: !Equals [ !Ref DataClientType, "KafkaAndRosBridge" ]
  FSxForLustreEnabled: !Equals [ !Ref FSxForLustre, 'enabled' ]

Mappings:
  noetic:
    us-east-1:
      AMI: ami-0c7167c7f19b42827
    us-east-2:
      AMI: ami-0cb8bd12ae00545d8
    us-west-2:
      AMI: ami-08a6c204633ef5cee
    eu-west-1:
      AMI: ami-0adab63e5043085d1
    eu-central-1:
      AMI: ami-0a7314af79e1386c7
    ap-southeast-1:
      AMI: ami-0b489de3fab3a7e3b
    ap-southeast-2:
      AMI: ami-03a8bb8234272744b
    ap-south-1:
      AMI: ami-009c3d26336b8d5c4
    ap-northeast-1:
      AMI: ami-0df434ac8f8cdeb9f
    ap-northeast-2:
      AMI: ami-02acd68454c0247e4
  humble:
    us-east-1:
      AMI: ami-0c460fdf6a8a1edef
    us-east-2:
      AMI: ami-0bddc40b31973ff95
    us-west-2:
      AMI: ami-058168290d30b9c52
    eu-west-1:
      AMI: ami-0a0aadde3561fdc1e
    eu-central-1:
      AMI: ami-04bd4f5e1a831e002
    ap-southeast-1:
      AMI: ami-0fd4144f52678fe37
    ap-southeast-2:
      AMI: ami-0ac438f9a63fdd525
    ap-south-1:
      AMI: ami-05205cb302b6dca6f
    ap-northeast-1:
      AMI: ami-096d2286904664854
    ap-northeast-2:
      AMI: ami-00324b863a508e247

Resources:
  Vpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-data-service'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Ref 'AWS::StackName'
  GatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      CidrBlock: !Ref VpcPublicSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Ref 'AWS::StackName'
        - Key: 'kubernetes.io/role/elb'
          Value: '1'
        - Key: !Sub 'kubernetes.io/cluster/${AWS::StackName}'
          Value: 'shared'
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: 
        Fn::Select: 
          - 1
          - Fn::GetAZs: ""
      CidrBlock: !Ref VpcPublicSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Ref 'AWS::StackName'
        - Key: 'kubernetes.io/role/elb'
          Value: '1'
        - Key: !Sub 'kubernetes.io/cluster/${AWS::StackName}'
          Value: 'shared'
  PublicSubnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: 
        Fn::Select: 
          - 2
          - Fn::GetAZs: ""
      CidrBlock: !Ref VpcPublicSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Ref 'AWS::StackName'
        - Key: 'kubernetes.io/role/elb'
          Value: '1'
        - Key: !Sub 'kubernetes.io/cluster/${AWS::StackName}'
          Value: 'shared'
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      CidrBlock: !Ref VpcPrivateSubnet1CIDR
      Tags:
        - Key: Network
          Value: Private
        - Key: Name
          Value: !Ref 'AWS::StackName'
        - Key: 'kubernetes.io/role/internal-elb'
          Value: '1'
        - Key: !Sub 'kubernetes.io/cluster/${AWS::StackName}'
          Value: 'shared'
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: 
        Fn::Select: 
          - 1
          - Fn::GetAZs: ""
      CidrBlock: !Ref VpcPrivateSubnet2CIDR
      Tags:
        - Key: Network
          Value: Private
        - Key: Name
          Value: !Ref 'AWS::StackName'
        - Key: 'kubernetes.io/role/internal-elb'
          Value: '1'
        - Key: !Sub 'kubernetes.io/cluster/${AWS::StackName}'
          Value: 'shared'
  PrivateSubnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: 
        Fn::Select: 
          - 2
          - Fn::GetAZs: ""
      CidrBlock: !Ref VpcPrivateSubnet3CIDR
      Tags:
        - Key: Network
          Value: Private
        - Key: Name
          Value: !Ref 'AWS::StackName'
        - Key: 'kubernetes.io/role/internal-elb'
          Value: '1'
        - Key: !Sub 'kubernetes.io/cluster/${AWS::StackName}'
          Value: 'shared'
  NATGatewayEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  NATGateway:
    Type: 'AWS::EC2::NatGateway'
    DependsOn: GatewayToInternet
    Properties:
      AllocationId: !GetAtt 
        - NATGatewayEIP
        - AllocationId
      SubnetId: !Ref PublicSubnet1
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    DependsOn: GatewayToInternet
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Ref 'AWS::StackName'
  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn: [ PublicRoute ]
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn: [ PublicRoute ]
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet3RouteAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn: [ PublicRoute ]
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Network
          Value: Private
        - Key: Name
          Value: !Ref 'AWS::StackName'
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
  PrivatePeeringRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: "192.168.0.0/22"
      VpcPeeringConnectionId: !Ref BatchFargateVpcPeering

  PrivateSubnet1RouteAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn: [ PrivateRoute ]
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnet2RouteAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn: [ PrivateRoute ]
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnet3RouteAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn: [ PrivateRoute ]
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable
  VpcS3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - Effect: "Allow"
            Principal: "*"
            Action: 
              - "s3:Get*"
              - "s3:List*"
              - "s3:PutObject*"
              - "s3:DeleteObject*"
            Resource: "*"
      RouteTableIds:
        - !Ref PrivateRouteTable
        - !Ref PublicRouteTable
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref Vpc
  VpcEcrApiEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      SubnetIds:
        - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2
        - Ref: PrivateSubnet3
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - Effect: "Allow"
            Principal: "*"
            Action: 
              - "ecr:*"
            Resource: "*"
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.api
      VpcEndpointType: 'Interface'
      VpcId: !Ref Vpc
  VpcEcrDkrEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      SubnetIds:
        - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2
        - Ref: PrivateSubnet3
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - 
            Effect: "Allow"
            Principal: "*"
            Action: 
              - "ecr:*"
            Resource: "*"
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.dkr
      VpcEndpointType: 'Interface'
      VpcId: !Ref Vpc
  VpcSecretsManagerEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      SubnetIds:
        - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2
        - Ref: PrivateSubnet3
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - 
            Effect: "Allow"
            Principal: "*"
            Action: 
              - "secretsmanager:*"
            Resource: "*"
      ServiceName: !Sub com.amazonaws.${AWS::Region}.secretsmanager
      VpcEndpointType: 'Interface'
      VpcId: !Ref Vpc
  VpcDynamodbEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref PrivateRouteTable
      ServiceName: !Sub com.amazonaws.${AWS::Region}.dynamodb
      VpcId: !Ref Vpc
  VpcSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: VPC security group
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  VpcSecurityGroupIngressFSx1: 
    Condition: FSxForLustreEnabled
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Ingress from within the VPC security group for FSx
      GroupId: !GetAtt VpcSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 988
      ToPort: 988
      SourceSecurityGroupId: !GetAtt VpcSecurityGroup.GroupId
  VpcSecurityGroupCIDRIngressFSx1: 
    Condition: FSxForLustreEnabled
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Ingress from within the VPC security group CIDR for FSx
      GroupId: !GetAtt VpcSecurityGroup.GroupId
      CidrIp: !Ref VpcCIDR
      IpProtocol: tcp
      FromPort: 988
      ToPort: 988
  VpcSecurityGroupIngressFSx2: 
    Condition: FSxForLustreEnabled
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Ingress from within the VPC security group for FSx
      GroupId: !GetAtt VpcSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 1021
      ToPort: 1023
      SourceSecurityGroupId: !GetAtt VpcSecurityGroup.GroupId
  VpcSecurityGroupCIDRIngressFSx2: 
    Condition: FSxForLustreEnabled
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Ingress from within the VPC security group CIDR for FSx
      GroupId: !GetAtt VpcSecurityGroup.GroupId
      CidrIp: !Ref VpcCIDR
      IpProtocol: tcp
      FromPort: 1021
      ToPort: 1023
  VpcSecurityGroupIngressEfs:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Ingress from within the VPC security group for Efs
      GroupId: !GetAtt VpcSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      SourceSecurityGroupId: !GetAtt VpcSecurityGroup.GroupId
  VpcSecurityGroupCIDRIngressEfs: 
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Ingress from within the VPC security group CIDR for Efs
      GroupId: !GetAtt VpcSecurityGroup.GroupId
      CidrIp: !Ref VpcCIDR
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
  VpcSecurityGroupIngressRosBridge: 
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Ingress from within the VPC security group for Ros bridge
      GroupId: !GetAtt VpcSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 9090
      ToPort: 9090
      SourceSecurityGroupId: !GetAtt VpcSecurityGroup.GroupId
  VpcSecurityGroupCIDRIngressRosBridge: 
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Ingress from within the VPC security group CIDR for Ros bridge
      GroupId: !GetAtt VpcSecurityGroup.GroupId
      CidrIp: !Ref VpcCIDR
      IpProtocol: tcp
      FromPort: 9090
      ToPort: 9090
  VpcSecurityGroupCIDREgress: 
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      Description: Egress rule for out bound traffic
      GroupId: !GetAtt VpcSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      CidrIp: '0.0.0.0/0'

  DesktopSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Desktop security group
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'

  DesktopSecurityGroupCIDRIngress1: 
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Ingress from CIDR for NICE-DCV access to graphics desktop
      GroupId: !GetAtt DesktopSecurityGroup.GroupId
      CidrIp: !Ref DesktopRemoteAccessCIDR
      IpProtocol: tcp
      FromPort: 8443
      ToPort: 8443

  DesktopSecurityGroupCIDRIngress2: 
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Ingress from CIDR for SSH access to graphics desktop
      GroupId: !GetAtt DesktopSecurityGroup.GroupId
      CidrIp: !Ref DesktopRemoteAccessCIDR
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22

  DesktopSecurityGroupCIDREgress: 
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      Description: Egress rule for out bound traffic
      GroupId: !GetAtt DesktopSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      CidrIp: '0.0.0.0/0'

  RedshiftClusterRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: redshift.amazonaws.com
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - "s3:GetObject"
                  - "s3:ListBucket"
                Resource:
                  - !Sub 'arn:aws:s3:::${S3Bucket}'
                  - !Sub 'arn:aws:s3:::${S3Bucket}/*'
              - Effect: Allow
                Action: 
                  - "athena:GetDatabase"
                  - "athena:GetTableMetadata"
                Resource:
                  - !Sub 'arn:aws:athena:${AWS::Region}:${AWS::AccountId}:datacatalog/*'
              - Effect: Allow
                Action:
                  - "athena:GetQueryExecution"
                  - "athena:GetQueryResults"
                  - "athena:StartQueryExecution"
                Resource:
                  - !Sub 'arn:aws:athena:${AWS::Region}:${AWS::AccountId}:workgroup/*'
          PolicyName: 'RedshiftClusterPolicy'

  RedshiftMasterUserPasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties: 
      Description: "Redshift database master user password"
      SecretString: 
        !Ref RedshiftMasterUserPassword


  RedshiftServerlessNamespace:
    Type: AWS::RedshiftServerless::Namespace
    Properties: 
      DbName: !Ref RedshiftDatabaseName
      AdminUsername: !Ref RedshiftMasterUsername
      AdminUserPassword: !Ref RedshiftMasterUserPassword
      DefaultIamRoleArn: !GetAtt RedshiftClusterRole.Arn
      IamRoles:
      - !GetAtt RedshiftClusterRole.Arn
      NamespaceName: !Ref RedshiftNamespace

  RedshiftServerlessWorkgroup:
    Type: AWS::RedshiftServerless::Workgroup
    DependsOn: [PrivateSubnet1RouteAssociation, PrivateSubnet2RouteAssociation, PrivateSubnet3RouteAssociation]
    Properties: 
      BaseCapacity: !Ref RedshiftServerlessBaseCapacity
      NamespaceName: !Ref RedshiftServerlessNamespace
      PubliclyAccessible: false
      ConfigParameters:
      - ParameterKey: enable_user_activity_logging
        ParameterValue: 'true'
      SecurityGroupIds: 
      - !GetAtt RedshiftSecurityGroup.GroupId
      SubnetIds: 
      - Ref: PrivateSubnet1
      - Ref: PrivateSubnet2
      - Ref: PrivateSubnet3
      WorkgroupName: !Ref RedshiftWorkgroup

  RedshiftSecurityGroup:
    DependsOn: [VpcSecurityGroup]
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Redshift Security group
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'

  RedshiftSecurityGroupIngress: 
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Ingress from  VPC security group to RedShift database
      GroupId: !GetAtt RedshiftSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 5439
      ToPort: 5439
      SourceSecurityGroupId: !GetAtt VpcSecurityGroup.GroupId

  RedshiftSecurityGroupBatchFargateIngress: 
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Ingress from batch fargate VPC security group to RedShift database
      GroupId: !GetAtt RedshiftSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 5439
      ToPort: 5439
      SourceSecurityGroupId: !GetAtt BatchFargateSecurityGroup.GroupId

  RedshiftSecurityGroupCIDRIngress: 
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Ingress from from  VPC CIDR to RedShift database
      GroupId: !GetAtt RedshiftSecurityGroup.GroupId
      CidrIp: !Ref VpcCIDR
      IpProtocol: tcp
      FromPort: 5439
      ToPort: 5439
  
  RedshiftSecurityGroupCIDREgress: 
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      Description: Egress rule for out bound traffic
      GroupId: !GetAtt RedshiftSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      CidrIp: '0.0.0.0/0'

  MSKClusterLogGroup:
    Condition: MSKEnabled
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AWS::StackName}-msk"
      RetentionInDays: 30

  MSKCluster:
    Condition: MSKEnabled
    Type: 'AWS::MSK::Cluster'
    DependsOn: [PrivateSubnet1RouteAssociation, PrivateSubnet2RouteAssociation, PrivateSubnet3RouteAssociation]
    Properties:
      ClusterName: !Sub '${AWS::StackName}'
      KafkaVersion: 2.2.1
      NumberOfBrokerNodes: !Ref MSKNumberOfNodes
      LoggingInfo:
        BrokerLogs: 
          CloudWatchLogs:
            Enabled: true
            LogGroup: !Ref MSKClusterLogGroup
      EncryptionInfo:
        EncryptionInTransit:
          ClientBroker: "TLS_PLAINTEXT"
          InCluster: false
      BrokerNodeGroupInfo:
        InstanceType: !Ref MSKBrokerNodeType
        ClientSubnets:
          - Ref: PrivateSubnet1
          - Ref: PrivateSubnet2
          - Ref: PrivateSubnet3
        SecurityGroups:
          - Ref: MSKSecurityGroup

  MSKSecurityGroup:
    Condition: MSKEnabled
    DependsOn: [VpcSecurityGroup]
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: MSK Security group
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'

  MSKSecurityGroupIngress:
    Condition: MSKEnabled
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Ingress from VPC security group to MSK cluster endpoint
      GroupId: !GetAtt MSKSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 9092
      ToPort: 9094
      SourceSecurityGroupId: !GetAtt VpcSecurityGroup.GroupId
  
  MSKSecurityGroupCIDRIngress: 
    Condition: MSKEnabled
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Ingress from VPC CIDR to MSK cluster endpoint
      GroupId: !GetAtt MSKSecurityGroup.GroupId
      CidrIp: !Ref VpcCIDR
      IpProtocol: tcp
      FromPort: 9092
      ToPort: 9094

  MSKSecurityGroupCIDREgress: 
    Condition: MSKEnabled
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      Description: Egress rule for out bound traffic
      GroupId: !GetAtt MSKSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      CidrIp: '0.0.0.0/0'

  EksControlPlaneRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: 
              - eks.amazonaws.com
              - ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
          - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKSClusterPolicy'
          - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKSServicePolicy'
  
  KMSKey:
    Condition: CreateEksKey
    Type: "AWS::KMS::Key"
    Properties:
      EnableKeyRotation: true
      KeyPolicy: {
        "Version": "2012-10-17",
        "Id": "key-default-1",
        "Statement": [
          {
            "Sid": "Enable IAM User Permissions",
            "Effect": "Allow",
            "Principal": {
              "AWS": !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
            },
            "Action": "kms:*",
            "Resource": "*"
          }
        ]
      }

  EksControlPlane:
    Type: "AWS::EKS::Cluster"
    DependsOn: [PrivateSubnet1RouteAssociation, PrivateSubnet2RouteAssociation, PrivateSubnet3RouteAssociation]
    Properties:
      Name: !Ref AWS::StackName
      ResourcesVpcConfig:
        SecurityGroupIds: 
        - !GetAtt VpcSecurityGroup.GroupId
        SubnetIds:
        - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2
        - Ref: PrivateSubnet3
      EncryptionConfig: 
        - Resources: [ secrets ]
          Provider:
            KeyArn: !If [ CreateEksKey, !GetAtt KMSKey.Arn, !Ref EKSEncryptSecretsKmsKeyArn ]
      RoleArn: !GetAtt EksControlPlaneRole.Arn
      Version: !Ref KubernetesVersion

  EksNodeRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - "autoscaling:DescribeAutoScalingGroups"
                  - "autoscaling:DescribeAutoScalingInstances"
                  - "autoscaling:DescribeLaunchConfigurations"
                  - "autoscaling:DescribeTags"
                  - "autoscaling:SetDesiredCapacity"
                  - "autoscaling:TerminateInstanceInAutoScalingGroup"
                  - "ec2:DescribeLaunchTemplateVersions"
                Resource: '*'
          PolicyName: 'EKSNodeAutoScalerPolicy'
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - "iam:CreateServiceLinkedRole"
                Resource:  "*"
                Condition:
                  StringLike:
                    iam:AWSServiceName:
                      - "fsx.amazonaws.com"
              - Effect: Allow
                Action: 
                  - "iam:CreateServiceLinkedRole"
                  - "iam:AttachRolePolicy"
                  - "iam:PutRolePolicy"
                Resource:  "arn:aws:iam::*:role/aws-service-role/s3.data-source.lustre.fsx.amazonaws.com/*"
              - Effect: Allow
                Action:
                  - "s3:ListBucket"
                Resource: '*'
              - Effect: Allow
                Action:
                  - "fsx:CreateFileSystem"
                  - "fsx:DeleteFileSystem"
                  - "fsx:DescribeFileSystems"
                  - "fsx:TagResource"
                Resource:  "*"
          PolicyName: 'EKSNodeFSxCNIPolicy'
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      Path: /

  EksPodServiceAccountRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: !Sub
          - |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Federated": "arn:aws:iam::${AWS::AccountId}:oidc-provider/${ClusterOIDCPath}"
                  },
                  "Action": "sts:AssumeRoleWithWebIdentity",
                  "Condition": {
                    "StringEquals": {
                      "${ClusterOIDCPath}:aud": "sts.amazonaws.com"
                    }
                  }
                }
              ]
            }   
          - ClusterOIDCPath: !Join 
            - ''
            - - 'oidc.eks.'
              - !Ref 'AWS::Region'
              - '.amazonaws.com/id/'
              - !Select [0, !Split ['.', !Select [1, !Split ['//', !GetAtt EksControlPlane.Endpoint]]]]     
      Policies:
        - PolicyName: 'eks-sa-role-poliicy'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - "s3:Get*"
                  - "s3:List*"
                  - "s3:PutObject*"
                  - "s3:DeleteObject*"
                Resource:
                  - !Sub 'arn:aws:s3:::${S3Bucket}'
                  - !Sub 'arn:aws:s3:::${S3Bucket}/*'
        - PolicyName: eks-pod-secretsmanager-policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                Resource:
                  - !Ref RedshiftMasterUserPasswordSecret
        - PolicyName: eks-pod-dynamodb-policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:*"
                Resource:
                  - !GetAtt DataRequestTable.Arn


  EKSNodeGroupSystem:
    Type: AWS::EKS::Nodegroup
    Properties: 
      AmiType: "AL2_x86_64"
      CapacityType: !Ref EKSSystemNodeGroupCapacityType
      ClusterName: !Ref EksControlPlane
      DiskSize: 40
      InstanceTypes: !Ref EKSSystemNodeGroupInstanceTypes
      NodegroupName: 'system-nodegroup'
      NodeRole: !GetAtt EksNodeRole.Arn
      RemoteAccess:
        Ec2SshKey: !Ref KeyPairName
      ScalingConfig: 
          DesiredSize: 2
          MaxSize: 16
          MinSize: 2
      Labels:
        nodegroup: 'system-nodegroup'
      Subnets: 
      - Ref: PrivateSubnet1
      - Ref: PrivateSubnet2
      - Ref: PrivateSubnet3

  EKSNodeGroupWork:
    Type: AWS::EKS::Nodegroup
    Properties: 
      AmiType: "AL2_x86_64"
      CapacityType: !Ref EKSWorkNodeGroupCapacityType
      ClusterName: !Ref EksControlPlane
      DiskSize: !Ref EKSNodeVolumeSizeGiB
      InstanceTypes: !Ref EKSWorkNodeGroupInstanceTypes
      NodegroupName: 'work-nodegroup'
      NodeRole: !GetAtt EksNodeRole.Arn
      RemoteAccess:
        Ec2SshKey: !Ref KeyPairName
      ScalingConfig: 
          DesiredSize: 0
          MaxSize: !Ref EKSWorkNodeGroupMaxSize
          MinSize: 0
      Labels:
        nodegroup: 'mozart-data-service'
      Subnets: 
      - Ref: PrivateSubnet1
      - Ref: PrivateSubnet2
      - Ref: PrivateSubnet3
  
  EksClusterAutoscalerServiceAccountRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: !Sub
          - |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Federated": "arn:aws:iam::${AWS::AccountId}:oidc-provider/${ClusterOIDCPath}"
                  },
                  "Action": "sts:AssumeRoleWithWebIdentity",
                  "Condition": {
                    "StringEquals": {
                      "${ClusterOIDCPath}:aud": "sts.amazonaws.com"
                    }
                  }
                }
              ]
            }   
          - ClusterOIDCPath: !Join 
            - ''
            - - 'oidc.eks.'
              - !Ref 'AWS::Region'
              - '.amazonaws.com/id/'
              - !Select [0, !Split ['.', !Select [1, !Split ['//', !GetAtt EksControlPlane.Endpoint]]]]     
      Policies:
        - PolicyName: 'eks-autoscaler-sa-role-poliicy'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - "autoscaling:DescribeAutoScalingGroups"
                  - "autoscaling:DescribeAutoScalingInstances"
                  - "autoscaling:DescribeLaunchConfigurations"
                  - "autoscaling:DescribeTags"
                  - "autoscaling:SetDesiredCapacity"
                  - "autoscaling:TerminateInstanceInAutoScalingGroup"
                  - "ec2:DescribeLaunchTemplateVersions"
                  - "ec2:DescribeInstanceTypes"
                Resource:
                  - '*'

  FSxFileSystem:
    Condition: FSxForLustreEnabled
    Type: AWS::FSx::FileSystem
    DependsOn: [ PrivateSubnet1RouteAssociation, VpcSecurityGroupIngressFSx1, VpcSecurityGroupIngressFSx2]
    Properties: 
      FileSystemType: 'LUSTRE'
      FileSystemTypeVersion: "2.15"
      LustreConfiguration: 
        ImportPath: !Sub 's3://${S3Bucket}/${FSxS3ImportPrefix}'
        DeploymentType: SCRATCH_2
        ImportedFileChunkSize: 512000
        AutoImportPolicy: "NEW_CHANGED"
      SecurityGroupIds: 
        - !GetAtt VpcSecurityGroup.GroupId
      StorageCapacity: !Ref FSxStorageCapacityGiB
      StorageType: 'SSD'
      SubnetIds: 
        - Ref: PrivateSubnet1
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  EFSFileSystem:
    Type: 'AWS::EFS::FileSystem'
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Encrypted : true
      PerformanceMode: generalPurpose
      FileSystemTags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-data-service'
  MountTarget1:
    Type: 'AWS::EFS::MountTarget'
    DependsOn: [ PrivateSubnet1RouteAssociation, VpcSecurityGroupIngressEfs ]
    Properties:
      FileSystemId:  !Ref EFSFileSystem
      SubnetId: !Ref PrivateSubnet1
      SecurityGroups:
        - !Ref VpcSecurityGroup
  MountTarget2:
    Type: 'AWS::EFS::MountTarget'
    DependsOn: [ PrivateSubnet2RouteAssociation, VpcSecurityGroupIngressEfs ]
    Properties:
      FileSystemId: !Ref EFSFileSystem 
      SubnetId: !Ref PrivateSubnet2
      SecurityGroups:
        - !Ref VpcSecurityGroup
  MountTarget3:
    Type: 'AWS::EFS::MountTarget'
    DependsOn: [ PrivateSubnet3RouteAssociation, VpcSecurityGroupIngressEfs ]
    Properties:
      FileSystemId: !Ref EFSFileSystem 
      SubnetId: !Ref PrivateSubnet3
      SecurityGroups:
        - !Ref VpcSecurityGroup

  GlueJobRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - glue.amazonaws.com
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole'
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - "s3:Get*"
                  - "s3:List*"
                  - "s3:PutObject*"
                Resource:
                  - !Sub 'arn:aws:s3:::${S3Bucket}'
                  - !Sub 'arn:aws:s3:::${S3Bucket}/*'
          PolicyName: 'glue-job-role-s3-poliicy'
  
  BatchFargateVpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: "192.168.0.0/22"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-batch-fargate'
  
  BatchFargateVpcPeering:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      PeerVpcId: !Ref Vpc
      VpcId: !Ref BatchFargateVpc

  BatchFargateInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Ref 'AWS::StackName'
  BatchFargateGatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref BatchFargateVpc
      InternetGatewayId: !Ref BatchFargateInternetGateway
  BatchFargatePublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref BatchFargateVpc
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      CidrBlock: "192.168.0.0/24"
  BatchFargatePublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    DependsOn: BatchFargateGatewayToInternet
    Properties:
      VpcId: !Ref BatchFargateVpc
      Tags:
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Ref 'AWS::StackName'
  BatchFargatePublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref BatchFargatePublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref BatchFargateInternetGateway
  BatchFargatePublicSubnetRouteAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn: [ BatchFargatePublicRoute ]
    Properties:
      SubnetId: !Ref BatchFargatePublicSubnet
      RouteTableId: !Ref BatchFargatePublicRouteTable

  BatchFargateNATGatewayEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  BatchFargateNATGateway:
    Type: 'AWS::EC2::NatGateway'
    DependsOn: BatchFargateGatewayToInternet
    Properties:
      AllocationId: !GetAtt 
        - BatchFargateNATGatewayEIP
        - AllocationId
      SubnetId: !Ref BatchFargatePublicSubnet
  BatchFargatePrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref BatchFargateVpc
      Tags:
        - Key: Network
          Value: Private
        - Key: Name
          Value: !Ref 'AWS::StackName'
  BatchFargatePrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref BatchFargatePrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref BatchFargateNATGateway

  BatchFargatePrivatePeeringRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref BatchFargatePrivateRouteTable
      DestinationCidrBlock: !Ref VpcCIDR
      VpcPeeringConnectionId: !Ref BatchFargateVpcPeering

  BatchFargatePrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref BatchFargateVpc
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      CidrBlock: "192.168.1.0/24"

  BatchFargatePrivateSubnet1RouteAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn: [ BatchFargatePrivateRoute ]
    Properties:
      SubnetId: !Ref BatchFargatePrivateSubnet1
      RouteTableId: !Ref BatchFargatePrivateRouteTable
  
  BatchFargatePrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref BatchFargateVpc
      AvailabilityZone: 
        Fn::Select: 
          - 1
          - Fn::GetAZs: ""
      CidrBlock: "192.168.2.0/24"

  BatchFargatePrivateSubnet2RouteAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn: [ BatchFargatePrivateRoute ]
    Properties:
      SubnetId: !Ref BatchFargatePrivateSubnet2
      RouteTableId: !Ref BatchFargatePrivateRouteTable


  BatchFargatePrivateSubnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref BatchFargateVpc
      AvailabilityZone: 
        Fn::Select: 
          - 2
          - Fn::GetAZs: ""
      CidrBlock: "192.168.3.0/24"

  BatchFargatePrivateSubnet3RouteAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn: [ BatchFargatePrivateRoute ]
    Properties:
      SubnetId: !Ref BatchFargatePrivateSubnet3
      RouteTableId: !Ref BatchFargatePrivateRouteTable

  BatchFargateSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Batch Fargate security group
      VpcId: !Ref BatchFargateVpc
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  BatchFargateSecurityGroupIngress: 
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Ingress from within the VPC security group
      GroupId: !GetAtt BatchFargateSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      SourceSecurityGroupId: !GetAtt BatchFargateSecurityGroup.GroupId
  BatchFargateSecurityGroupCIDREgress: 
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      Description: Egress rule for out bound traffic
      GroupId: !GetAtt BatchFargateSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      CidrIp: '0.0.0.0/0'
  
  BatchFargateEcrApiEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      SubnetIds:
        - Ref: BatchFargatePrivateSubnet1
        - Ref: BatchFargatePrivateSubnet2
        - Ref: BatchFargatePrivateSubnet3
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - Effect: "Allow"
            Principal: "*"
            Action: 
              - "ecr:*"
            Resource: "*"
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.api
      VpcEndpointType: 'Interface'
      VpcId: !Ref BatchFargateVpc
  BatchFargateEcrDkrEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      SubnetIds:
        - Ref: BatchFargatePrivateSubnet1
        - Ref: BatchFargatePrivateSubnet2
        - Ref: BatchFargatePrivateSubnet3
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - Effect: "Allow"
            Principal: "*"
            Action: 
              - "ecr:*"
            Resource: "*"
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.dkr
      VpcEndpointType: 'Interface'
      VpcId: !Ref BatchFargateVpc
  BatchFargateEcsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      SubnetIds:
        - Ref: BatchFargatePrivateSubnet1
        - Ref: BatchFargatePrivateSubnet2
        - Ref: BatchFargatePrivateSubnet3
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - Effect: "Allow"
            Principal: "*"
            Action: 
              - "ecs:*"
            Resource: "*"
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecs
      VpcEndpointType: 'Interface'
      VpcId: !Ref BatchFargateVpc
  BatchFargateEcsAgentEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      SubnetIds:
        - Ref: BatchFargatePrivateSubnet1
        - Ref: BatchFargatePrivateSubnet2
        - Ref: BatchFargatePrivateSubnet3
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - Effect: "Allow"
            Principal: "*"
            Action: 
              - "ecs:*"
            Resource: "*"
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecs-agent
      VpcEndpointType: 'Interface'
      VpcId: !Ref BatchFargateVpc
  BatchFargateEcsTelemetryEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      SubnetIds:
        - Ref: BatchFargatePrivateSubnet1
        - Ref: BatchFargatePrivateSubnet2
        - Ref: BatchFargatePrivateSubnet3
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - Effect: "Allow"
            Principal: "*"
            Action: 
              - "ecs:*"
            Resource: "*"
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecs-telemetry
      VpcEndpointType: 'Interface'
      VpcId: !Ref BatchFargateVpc
  BatchFargateSecretsManagerEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      SubnetIds:
        - Ref: BatchFargatePrivateSubnet1
        - Ref: BatchFargatePrivateSubnet2
        - Ref: BatchFargatePrivateSubnet3
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - 
            Effect: "Allow"
            Principal: "*"
            Action: 
              - "secretsmanager:*"
            Resource: "*"
      ServiceName: !Sub com.amazonaws.${AWS::Region}.secretsmanager
      VpcEndpointType: 'Interface'
      VpcId: !Ref BatchFargateVpc

  BatchFargateEfsFileSystem:
    Type: 'AWS::EFS::FileSystem'
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Encrypted : true
      PerformanceMode: generalPurpose
      FileSystemTags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-batch-fargate'

  BatchFargateEfsAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties: 
      FileSystemId: !Ref BatchFargateEfsFileSystem

  BatchFargateMountTarget1:
    Type: 'AWS::EFS::MountTarget'
    DependsOn: 
      - BatchFargatePrivateSubnet1RouteAssociation
      - BatchFargateSecurityGroupIngress
    Properties:
      FileSystemId:  !Ref BatchFargateEfsFileSystem
      SubnetId: !Ref BatchFargatePrivateSubnet1
      SecurityGroups:
        - !Ref BatchFargateSecurityGroup
  
  BatchFargateMountTarget2:
    Type: 'AWS::EFS::MountTarget'
    DependsOn: 
      - BatchFargatePrivateSubnet2RouteAssociation
      - BatchFargateSecurityGroupIngress
    Properties:
      FileSystemId:  !Ref BatchFargateEfsFileSystem
      SubnetId: !Ref BatchFargatePrivateSubnet2
      SecurityGroups:
        - !Ref BatchFargateSecurityGroup

  BatchFargateMountTarget3:
    Type: 'AWS::EFS::MountTarget'
    DependsOn: 
      - BatchFargatePrivateSubnet3RouteAssociation
      - BatchFargateSecurityGroupIngress
    Properties:
      FileSystemId:  !Ref BatchFargateEfsFileSystem
      SubnetId: !Ref BatchFargatePrivateSubnet3
      SecurityGroups:
        - !Ref BatchFargateSecurityGroup

  BatchServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - batch.amazonaws.com
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole'
  
  BatchExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - ecs-tasks.amazonaws.com
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - "elasticfilesystem:ClientMount"
                  - "elasticfilesystem:ClientWrite"
                Resource: 
                  - !GetAtt BatchFargateEfsFileSystem.Arn
                Condition:
                  StringEquals:
                    "elasticfilesystem:AccessPointArn": !GetAtt BatchFargateEfsAccessPoint.Arn
          PolicyName: 'batch-execution-efs-policy'
  
  StepFunctionsRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - states.amazonaws.com
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEventBridgeFullAccess'
      Policies:
        - PolicyName: steps-batch-policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "batch:SubmitJob"
                Resource:
                  - !Ref FargateJobQueue
                  - !Sub 'arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job-definition/*'
              - Effect: Allow
                Action:
                  - "batch:DescribeJobs"
                Resource:
                  - "*"
  BatchJobRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - ecs-tasks.amazonaws.com
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: 'batch-job-s3-policy'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - "s3:Get*"
                  - "s3:List*"
                  - "s3:PutObject*"
                  - "s3:DeleteObject*"
                Resource: 
                  - !Sub 'arn:aws:s3:::${S3Bucket}'
                  - !Sub 'arn:aws:s3:::${S3Bucket}/*'
              - Effect: Allow
                Action: 
                  - "s3:Get*"
                  - "s3:List*"
                Resource: 
                  - 'arn:aws:s3:::aev-autonomous-driving-dataset'
                  - 'arn:aws:s3:::aev-autonomous-driving-dataset/*'
                  - 'arn:aws:s3:::ford-multi-av-seasonal'
                  - 'arn:aws:s3:::ford-multi-av-seasonal/*'
        - PolicyName: batch-job-batch-policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "batch:SubmitJob"
                Resource:
                  - !Ref FargateJobQueue
                  - !Sub 'arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job-definition/*'
              - Effect: Allow
                Action:
                  - "batch:TerminateJob"
                Resource:
                  - !Sub 'arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job/*'
              - Effect: Allow
                Action:
                  - "batch:DescribeJobs"
                Resource:
                  - "*"
        
        - PolicyName: batch-job-glue-policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "glue:CreateDatabase"
                  - "glue:DeleteDatabase"
                  - "glue:GetDatabase"
                  - "glue:GetDatabases"
                  - "glue:UpdateDatabase"
                  - "glue:CreateTable"
                  - "glue:DeleteTable"
                  - "glue:BatchDeleteTable"
                  - "glue:UpdateTable"
                  - "glue:GetTable"
                  - "glue:GetTables"
                  - "glue:BatchCreatePartition"
                  - "glue:CreatePartition"
                  - "glue:DeletePartition"
                  - "glue:BatchDeletePartition"
                  - "glue:UpdatePartition"
                  - "glue:GetPartition"
                  - "glue:GetPartitions"
                  - "glue:BatchGetPartition"
                Resource:
                  - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog'
                  - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/*'
                  - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/*'
                  - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:userDefinedFunction/*'
              - Effect: Allow
                Action:
                  - "glue:CreateJob"
                  - "glue:StartJobRun"
                  - "glue:GetJob*"
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !GetAtt GlueJobRole.Arn

        - PolicyName: batch-job-athena-policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "athena:GetQueryExecution"
                  - "athena:GetQueryResults"
                  - "athena:StartQueryExecution"
                Resource:
                  - !Sub 'arn:aws:athena:${AWS::Region}:${AWS::AccountId}:workgroup/*'

        - PolicyName: batch-job-secretsmanager-policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                Resource:
                  - !Ref RedshiftMasterUserPasswordSecret

  FargateComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      ComputeEnvironmentName: !Sub '${AWS::StackName}-fargate'
      Type: MANAGED
      State: ENABLED
      ComputeResources:
        Type: !Ref FargateComputeType
        MaxvCpus: !Ref FargateComputeMax
        Subnets: 
          - !Ref BatchFargatePrivateSubnet1
          - !Ref BatchFargatePrivateSubnet2
          - !Ref BatchFargatePrivateSubnet3
        SecurityGroupIds:
          - !GetAtt BatchFargateSecurityGroup.GroupId

      ServiceRole: !GetAtt BatchServiceRole.Arn
      Tags:
        Name: !Ref AWS::StackName
  FargateJobQueue:
    Type: AWS::Batch::JobQueue
    Properties: 
      JobQueueName: !Sub '${AWS::StackName}-fargate'
      ComputeEnvironmentOrder: 
        - Order: 1
          ComputeEnvironment: !Ref FargateComputeEnvironment
      Priority: 1
      State: ENABLED

  PythonFromS3JobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties: 
      JobDefinitionName: !Sub '${AWS::StackName}-pythonfroms3'
      Type: container
      PlatformCapabilities: 
        - FARGATE
      ContainerProperties:
        Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/pythonfroms3:focal'
        FargatePlatformConfiguration:
          PlatformVersion: "1.4.0"
        ExecutionRoleArn: !GetAtt BatchExecutionRole.Arn
        JobRoleArn: !GetAtt BatchJobRole.Arn
        ResourceRequirements:
          - Type: "VCPU"
            Value: "4"
          - Type: "MEMORY"
            Value: "8192"
        Volumes:
          - EfsVolumeConfiguration:
              FileSystemId: !Ref BatchFargateEfsFileSystem
              AuthorizationConfig:
                AccessPointId: !Ref BatchFargateEfsAccessPoint
                Iam: "ENABLED"
              RootDirectory: "/"
              TransitEncryption: "ENABLED"
            Name: "efs"
        MountPoints:
          - ContainerPath: "/efs"
            SourceVolume: "efs"

  Ros1PythonFromS3JobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties: 
      JobDefinitionName: !Sub '${AWS::StackName}-ros1-pythonfroms3'
      Type: container
      PlatformCapabilities: 
        - FARGATE
      ContainerProperties:
        Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/pythonfroms3:noetic'
        FargatePlatformConfiguration:
          PlatformVersion: "1.4.0"
        ExecutionRoleArn: !GetAtt BatchExecutionRole.Arn
        JobRoleArn: !GetAtt BatchJobRole.Arn
        ResourceRequirements:
          - Type: "VCPU"
            Value: "4"
          - Type: "MEMORY"
            Value: "8192"
        Volumes:
          - EfsVolumeConfiguration:
              FileSystemId: !Ref BatchFargateEfsFileSystem
              AuthorizationConfig:
                AccessPointId: !Ref BatchFargateEfsAccessPoint
                Iam: "ENABLED"
              RootDirectory: "/"
              TransitEncryption: "ENABLED"
            Name: "efs"
        MountPoints:
          - ContainerPath: "/efs"
            SourceVolume: "efs"

  DataRequestTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: request_hash
          AttributeType: S
        - AttributeName: request_index
          AttributeType: S
      KeySchema:
        - AttributeName: request_hash
          KeyType: HASH
        - AttributeName: request_index
          KeyType: RANGE

  DesktopRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - ec2.amazonaws.com
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonFSxReadOnlyAccess"
      Policies:
        - PolicyName: desktop-cloudformation-policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudformation:DescribeStacks'
                Resource: 
                  - !Sub 'arn:aws:cloudformation:::stack/${AWS::StackName}/*'

       

        - PolicyName: desktop-kafka-policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                - "kafka:DescribeCluster"
                - "kafka:DescribeConfiguration"
                - "kafka:DescribeConfigurationRevision"
                - "kafka:CreateConfiguration"
                - "kafka:UpdateClusterConfiguration"
                - "kafka:GetBootstrapBrokers"
                - "kafka:ListConfigurations"
                Resource:
                  - "*"
              
        - PolicyName: desktop-batch-policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "batch:SubmitJob"
                Resource:
                  - !Ref FargateJobQueue
                  - !Sub 'arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job-definition/*'
              - Effect: Allow
                Action:
                  - "batch:DescribeJobs"
                Resource:
                  - "*"

        - PolicyName: desktop-sfn-policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - states:CreateStateMachine
                  - states:StartExecution
                  - states:StopExecution
                  - states:DescribeStateMachine*
                  - states:DescribeExecution
                  - states:ListStateMachines
                  - states:ListExecutions
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !GetAtt StepFunctionsRole.Arn

        - PolicyName: desktop-ecr-policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:GetRepositoryPolicy"
                  - "ecr:DescribeRepositories"
                  - "ecr:ListImages"
                  - "ecr:DescribeImages"
                  - "ecr:BatchGetImage"
                  - "ecr:InitiateLayerUpload"
                  - "ecr:UploadLayerPart"
                  - "ecr:CompleteLayerUpload"
                  - "ecr:PutImage"
                  - "ecr:CreateRepository"
                Resource: "*"
                
        - PolicyName: desktop-dcv-license-s3
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource: 
                  - !Sub 'arn:aws:s3:::dcv-license.${AWS::Region}/*'

        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - "s3:Get*"
                  - "s3:List*"
                  - "s3:PutObject*"
                  - "s3:DeleteObject*"
                Resource: 
                  - !Sub 'arn:aws:s3:::${S3Bucket}'
                  - !Sub 'arn:aws:s3:::${S3Bucket}/*'
              - Effect: Allow
                Action: 
                  - "s3:Get*"
                  - "s3:List*"
                Resource: 
                  - 'arn:aws:s3:::aev-autonomous-driving-dataset'
                  - 'arn:aws:s3:::aev-autonomous-driving-dataset/*'
                  - 'arn:aws:s3:::ford-multi-av-seasonal'
                  - 'arn:aws:s3:::ford-multi-av-seasonal/*'
          PolicyName: 'DesktopS3Policy'

        - PolicyName: desktop-ssm
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:GetParametersByPath'
                Resource: 
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/*'

        - PolicyName: eks-policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'eks:DescribeCluster'
                Resource: 
                  - !GetAtt EksControlPlane.Arn

  DesktopInstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - Ref: "DesktopRole"
  
  DesktopLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateData: 
        MetadataOptions:
          HttpTokens: "required"
          HttpEndpoint: "enabled"

  DesktopInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref DesktopLaunchTemplate
        Version: !GetAtt DesktopLaunchTemplate.LatestVersionNumber
      ImageId: !If 
        - OverrideAMI
        - !Ref UbuntuAMI
        - !FindInMap 
          - !Ref RosVersion
          - !Ref 'AWS::Region'
          - AMI
      InstanceType: !Ref DesktopInstanceType
      EbsOptimized: true
      IamInstanceProfile: !Ref DesktopInstanceProfile
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: !Ref DesktopEbsVolumeSize
            VolumeType: !Ref DesktopEbsVolumeType
            Encrypted: true
            DeleteOnTermination: true
      NetworkInterfaces: 
      - AssociatePublicIpAddress: !Ref DesktopHasPublicIpAddress
        DeviceIndex: "0"
        GroupSet: 
          - !Ref DesktopSecurityGroup
        SubnetId: !Ref PublicSubnet1
    
      KeyName: !Ref KeyPairName
      Tags: 
        - Key: "Name"
          Value: !Sub '${AWS::StackName}-desktop'

      UserData:
        Fn::Base64: 
          'Fn::Join':
          - ''
          - - |
              Content-Type: multipart/mixed; boundary="//"
              MIME-Version: 1.0

              --//
              Content-Type: text/cloud-config; charset="us-ascii"
              MIME-Version: 1.0
              Content-Transfer-Encoding: 7bit
              Content-Disposition: attachment; filename="cloud-config.txt"

              #cloud-config
              cloud_final_modules:
              - [scripts-user, always]

              --//
              Content-Type: text/x-shellscript; charset="us-ascii"
              MIME-Version: 1.0
              Content-Transfer-Encoding: 7bit
              Content-Disposition: attachment; filename="userdata.txt"

              #!/bin/bash -xe
              echo "Cloud init in progress!" > /etc/motd
              . /etc/os-release

              distro=ubuntu${VERSION_ID//[.]/""}
              arch="x86_64"
              echo "Ubuntu  $distro/$arch"
             
              # setup graphics desktop
              export DEBIAN_FRONTEND=noninteractive
              export DEBCONF_NONINTERACTIVE_SEEN=true

              dpkg -l | grep linux | awk -F' ' '{print $2}' > /tmp/dpkg.out
              for pkg in `cat /tmp/dpkg.out`; do apt-mark hold $pkg; done

              CUDA=12.3
              CUDA_DASH=${CUDA//\./-}

              # check if we have a GPU and if Nvidia drivers and CUDA need to be installed
              [[ ! -z $(lspci -v | grep NVIDIA) ]] && \
              [[ ! -x "$(command -v nvidia-smi)" ]] && \
              apt-get -y install linux-headers-$(uname -r) && \
              wget https://developer.download.nvidia.com/compute/cuda/repos/$distro/$arch/cuda-keyring_1.0-1_all.deb && \
              dpkg -i cuda-keyring_1.0-1_all.deb && \
              apt-get update && apt-get -y purge cuda && apt-get -y purge nvidia-* && apt-get -y purge libnvidia-* && apt-get -y autoremove && \
              apt-get -y install cuda-${CUDA_DASH} && \
              echo "export PATH=/usr/local/cuda-${CUDA}/bin:$PATH" >> /home/ubuntu/.bashrc && \
              CUDA_COMPAT=$(nvidia-smi | grep CUDA | awk '{print $(NF - 1)}') && \
              CUDA_COMPAT_DASH="${CUDA_COMPAT//\./-}" && \
              apt-get -y install cuda-compat-${CUDA_COMPAT_DASH} && \
              echo "export LD_LIBRARY_PATH=/usr/local/cuda-${CUDA_COMPAT}/compat:/usr/local/cuda-${CUDA}/lib64:$LD_LIBRARY_PATH" >> /home/ubuntu/.bashrc && \
              reboot

            - !Sub
              |
              # setup software repo for docker
              wget -qO - https://download.docker.com/linux/ubuntu/gpg > ./GPG_DOCKER.PUB
              gpg --no-default-keyring --keyring ./docker_keyring.gpg --import  ./GPG_DOCKER.PUB
              gpg --no-default-keyring --keyring ./docker_keyring.gpg  --export > ./docker.gpg
              mv ./docker.gpg /etc/apt/trusted.gpg.d/
              rm ./GPG_DOCKER.PUB
              
              add-apt-repository -y  "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
   
              # setup software repo for fsx-lustre client
              wget -qO - https://fsx-lustre-client-repo-public-keys.s3.amazonaws.com/fsx-ubuntu-public-key.asc > ./fsx-ubuntu-public-key.asc
              gpg --no-default-keyring --keyring ./fsx_keyring.gpg --import  ./fsx-ubuntu-public-key.asc
              gpg --no-default-keyring --keyring ./fsx_keyring.gpg  --export > ./fsx.gpg
              mv ./fsx.gpg /etc/apt/trusted.gpg.d/
              rm ./fsx-ubuntu-public-key.asc

              # add key for NICE-DCV
              wget -qO - https://d1uj6qtbmh3dt5.cloudfront.net/NICE-GPG-KEY > ./NICE-GPG-KEY
              gpg --no-default-keyring --keyring ./nice_dcv_keyring.gpg --import  ./NICE-GPG-KEY
              gpg --no-default-keyring --keyring ./nice_dcv_keyring.gpg  --export > ./nice_dcv.gpg
              mv ./nice_dcv.gpg /etc/apt/trusted.gpg.d/
              rm ./NICE-GPG-KEY

              # update and install required packages
              apt-get update

              apt-get install -y git tar
              apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common
              
              # install docker if it is not installed
              if [ ! -x "$(command -v docker)" ]; then
                apt-get -y install docker-ce docker-ce-cli containerd.io      
                usermod -aG docker ubuntu

                # install nvidia container toolkit if we have a nvidia GPU
                if [[ -x "$(command -v nvidia-smi)" ]]
                then
                  wget -qO - https://nvidia.github.io/nvidia-container-runtime/gpgkey > ./gpg_nvidia_container_runtime.pub
                  gpg --no-default-keyring --keyring ./nvidia_container_runtime_keyring.gpg --import  ./gpg_nvidia_container_runtime.pub
                  gpg --no-default-keyring --keyring ./nvidia_container_runtime_keyring.gpg --export >  ./nvidia_container_runtime.gpg
                  mv ./nvidia_container_runtime.gpg /etc/apt/trusted.gpg.d/
                  rm ./gpg_nvidia_container_runtime.pub

                  distribution=$ID$VERSION_ID
                  curl -s -L https://nvidia.github.io/nvidia-container-runtime/$distribution/nvidia-container-runtime.list | \
                    tee /etc/apt/sources.list.d/nvidia-container-runtime.list
                  apt-get update
                  apt-get -y install nvidia-container-toolkit
                fi
              fi

              apt-get install -y tzdata
              apt-get install -y keyboard-configuration
              apt-get install -y gnupg2
              apt-get install -y lsb-core 

              # install DCV server
              if [[ "${DesktopType}" == "Graphical" ]] 
              then
                echo "install DCV server..."
                apt-get install -y ubuntu-desktop
              fi

              ROS=${RosVersion}
              if [[ $VERSION_ID == 20.04* ]]
              then
                [[ $ROS != 'noetic' ]] && echo "RosVersion must be 'noetic' for Ubuntu $VERSION" && exit 1
                add-apt-repository -y  "deb https://fsx-lustre-client-repo.s3.amazonaws.com/ubuntu focal main"
                
                # setup software repo for ros
                sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list' 
                apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654 
                apt-get update
                
                if [[ "${DesktopType}" == "Graphical" ]] && [[ ! -x "$(command -v dcv)" ]]
                then
                  apt-get -y install gdm3
                  apt-get -y upgrade
                  echo "/usr/sbin/gdm3" > /etc/X11/default-display-manager
                  dpkg-reconfigure gdm3
                  sed -i -e "s/#WaylandEnable=false/WaylandEnable=false/g" /etc/gdm3/custom.conf
                  systemctl restart gdm3

                  apt-get -y install mesa-utils
                  if [[ -x "$(command -v nvidia-xconfig)" ]] && [[ -x "$(command -v nvidia-smi)" ]]
                  then
                    nvidia-xconfig --preserve-busid --enable-all-gpus
                  fi

                  #restart X server
                  echo "restart X-server"
                  systemctl set-default graphical.target
                  systemctl isolate graphical.target

                  wget https://d1uj6qtbmh3dt5.cloudfront.net/2020.2/Servers/nice-dcv-2020.2-9662-ubuntu2004-x86_64.tgz
                  tar -xvzf nice-dcv-2020.2-9662-ubuntu2004-x86_64.tgz
                  cd nice-dcv-2020.2-9662-ubuntu2004-x86_64
                  apt-get -y install ./nice-dcv-server_2020.2.9662-1_amd64.ubuntu2004.deb/
                  reboot
                fi

              elif [[ $VERSION_ID == 22.04* ]]
              then   
                [[ $ROS != 'humble' ]] && echo "RosVersion must be 'humble' for Ubuntu $VERSION" && exit 1
                add-apt-repository -y  "deb https://fsx-lustre-client-repo.s3.amazonaws.com/ubuntu jammy main"
                
                add-apt-repository universe
                curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
                echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu jammy main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null
                apt-get update

                if [[ "${DesktopType}" == "Graphical" ]] && [[ ! -x "$(command -v dcv)" ]]
                then
                  apt-get -y install gdm3
                  apt-get -y upgrade || echo "ignoring upgrade error"
                  echo "/usr/sbin/gdm3" > /etc/X11/default-display-manager
                  dpkg-reconfigure gdm3
                  sed -i -e "s/#WaylandEnable=false/WaylandEnable=false/g" /etc/gdm3/custom.conf
                  systemctl restart gdm3

                  apt-get -y install mesa-utils
                  if [[ -x "$(command -v nvidia-xconfig)" ]] && [[ -x "$(command -v nvidia-smi)" ]]
                  then
                    nvidia-xconfig --preserve-busid --enable-all-gpus
                  fi

                  #restart X server
                  echo "restart X-server"
                  systemctl set-default graphical.target
                  systemctl isolate graphical.target

                  wget https://d1uj6qtbmh3dt5.cloudfront.net/2022.1/Servers/nice-dcv-2022.1-13300-ubuntu2204-x86_64.tgz
                  tar -xvzf nice-dcv-2022.1-13300-ubuntu2204-x86_64.tgz
                  cd nice-dcv-2022.1-13300-ubuntu2204-x86_64
                  apt-get -y install ./nice-dcv-server_2022.1.13300-1_amd64.ubuntu2204.deb/
                  reboot
                fi

              else
                echo "Ubuntu $VERSION_ID is not supported; must be one of 20.04, or 22.04"
                exit 1
              fi

              if [[ "${DesktopType}" == "Graphical" ]]
              then
                #restart X server
                systemctl set-default graphical.target
                systemctl isolate graphical.target
    
                # Create DCV server configuration file
                [[ -d /opt/dcv-session-store ]] || mkdir /opt/dcv-session-store
                echo "[license]" >> dcv.conf
                echo "[log]" >> dcv.conf
                echo "[session-management]" >> dcv.conf
                echo "create-session = true" >> dcv.conf
                echo "[session-management/defaults]" >> dcv.conf
                echo "[session-management/automatic-console-session]" >> dcv.conf
                echo "owner=ubuntu" >> dcv.conf
                echo "storage-root=\"/opt/dcv-session-store/\"" >> dcv.conf
                echo "[display]" >> dcv.conf
                echo "[connectivity]" >> dcv.conf
                echo "[security]" >> dcv.conf
                echo "authentication=\"system\"" >> dcv.conf
                echo "[clipboard]" >> dcv.conf
                echo "primary-selection-copy=true" >> dcv.conf
                echo "primary-selection-paste=true" >> dcv.conf
                mv dcv.conf /etc/dcv/dcv.conf

                # Create DCV session permissions files
                rm -f /home/ubuntu/dcv.perms
                echo "[permissions]" >> /home/ubuntu/dcv.perms
                echo "%owner% allow builtin" >> /home/ubuntu/dcv.perms

                # Enable DCV server
                systemctl enable dcvserver
                systemctl restart dcvserver
                  
                echo "install DCV server complete"

                snap install foxglove-studio
              fi

              # install nfs-common
              apt-get install -y nfs-common

              apt-get install -y python3-minimal  python3-pip
              test -f /usr/bin/python || ln -s `which python3` /usr/bin/python
              pip3 install --upgrade pip
              pip3 install boto3
              pip3 install kafka-python
              pip3 install redshift_connector
              pip3 install --upgrade awscli
              pip3 install jupyterlab
              pip3 install pyquaternion
              pip3 install --ignore-installed open3d

              # install ros
              echo "install ros $ROS ..."
              
              apt-get install -y ros-$ROS-desktop-full 
              echo "source /opt/ros/$ROS/setup.bash" >> /home/ubuntu/.bashrc
              apt-get install -y python3-rosdep python3-rosinstall python3-rosinstall-generator python3-wstool build-essential

              if [[ ! -d /etc/ros/rosdep/sources.list.d ]]
              then
                rosdep init
              fi
              sudo -u ubuntu rosdep update

              if [[ $ROS == 'humble' ]]
              then
                apt-get install -y python3-colcon-common-extensions
                apt-get install -y ros-humble-rosbag2-storage-mcap
                apt-get install -y ros-humble-rosbridge-server
              fi

              # Create roscore startup script
              if [[ ! -f /usr/local/bin/start-roscore.sh ]]
              then
                echo "#!/bin/bash" >> /usr/local/bin/start-roscore.sh
                echo "source /opt/ros/$ROS/setup.bash" >> /usr/local/bin/start-roscore.sh
                echo "roscore" >> /usr/local/bin/start-roscore.sh
                chmod a+x /usr/local/bin/start-roscore.sh
              fi

              if [[ ! -f /etc/systemd/system/roscore.service ]]
              then
                echo "[Unit]" >> /etc/systemd/system/roscore.service
                echo "Description=roscore service" >> /etc/systemd/system/roscore.service
                echo "" >> /etc/systemd/system/roscore.service
                echo "[Service]" >> /etc/systemd/system/roscore.service
                echo "User=ubuntu" >> /etc/systemd/system/roscore.service
                echo "ExecStart=/usr/local/bin/start-roscore.sh" >> /etc/systemd/system/roscore.service
                echo "Restart=on-abort" >> /etc/systemd/system/roscore.service
                echo "" >> /etc/systemd/system/roscore.service
                echo "[Install]" >> /etc/systemd/system/roscore.service
                echo "WantedBy=graphical.target" >> /etc/systemd/system/roscore.service
              fi

              systemctl enable roscore
              echo "install Ros $ROS complete"

              # clone repository
              [[ ! -d /home/ubuntu/amazon-eks-autonomous-driving-data-service ]] && cd /home/ubuntu && \
                git clone https://github.com/aws-samples/amazon-eks-autonomous-driving-data-service.git
              export DIR=/home/ubuntu/amazon-eks-autonomous-driving-data-service
              chown -R ubuntu:ubuntu  $DIR
                          
              # update /home/ubuntu/.bashrc
              echo "export cfn_stack_name=${AWS::StackName}" >> /home/ubuntu/.bashrc

              # Create EFS mount script 
              cat >/usr/local/bin/mount-efs.sh <<EOL
              #!/bin/bash

              # Mount EFS
              [[ -d /efs ]] || mkdir /efs
              mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport ${EFSFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /efs

              EOL

              chmod u+x /usr/local/bin/mount-efs.sh
              /usr/local/bin/mount-efs.sh

              # Create config file
              [[ -d /home/ubuntu/.aws ]] || mkdir /home/ubuntu/.aws
              cat >/home/ubuntu/.aws/config <<EOL
              [default]
              region = ${AWS::Region}
              output=json

              EOL
              chown -R ubuntu:ubuntu /home/ubuntu/.aws

              # install kubectl for EKS
              [[ -d /usr/local/bin ]] || mkdir -p /usr/local/bin
              curl -o /usr/local/bin/kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/${KubectlVersion}/bin/linux/amd64/kubectl
              chmod a+x /usr/local/bin/kubectl
              curl -o /usr/local/bin/aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/${KubectlVersion}/bin/linux/amd64/aws-iam-authenticator
              
              # install eksctl 
              curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
              mv /tmp/eksctl /usr/local/bin

              # install helm
              curl -o /tmp/get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
              chmod 700 /tmp/get_helm.sh
              /tmp/get_helm.sh
              rm /tmp/get_helm.sh

              if [[ "${DesktopType}" == "Graphical" ]]
              then
                echo "NICE DCV server is enabled!" > /etc/motd
              else
                echo "NICE DCV server is disabled!" > /etc/motd
              fi

            - AWS_REGION=
            - !Ref AWS::Region
            - |+
            
            - FSX_ENABLED=
            - !If
              - FSxForLustreEnabled
              - "true"
              - "false"
            - |+

            - FSX_FS_ID=
            - !If 
              - FSxForLustreEnabled 
              - !Ref FSxFileSystem
              - ''
            - |+

            - FSX_MOUNT_NAME=
            - !If 
              - FSxForLustreEnabled 
              - !GetAtt FSxFileSystem.LustreMountName
              - ''
            - |+

            - |
              # Create FSx  mount script
              cat >/usr/local/bin/mount-fsx.sh <<EOL
              #!/bin/bash

              echo "FSx for Lustre is enabled: $FSX_ENABLED"
              # Mount FSX
              if [[ "$FSX_ENABLED"  == "true" ]]
              then
                apt-get -y install lustre-client-modules-$(uname -r)
                [[ -d /fsx ]] || mkdir /fsx
                mount -t lustre -o noatime,flock $FSX_FS_ID.fsx.$AWS_REGION.amazonaws.com@tcp:/$FSX_MOUNT_NAME /fsx
              fi
              EOL
              
              chmod u+x /usr/local/bin/mount-fsx.sh
              /usr/local/bin/mount-fsx.sh

  EfsIdSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/efs_id"
      Type: String
      Value: !Ref EFSFileSystem
      Description: EFS Id
  FsxIdSsm:
    Condition: FSxForLustreEnabled
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/fsx_id"
      Type: String
      Value: !Ref FSxFileSystem
      Description: FSx Id

  FsxMountNameSsm:
    Condition: FSxForLustreEnabled
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/fsx_mount_name"
      Type: String
      Value: !GetAtt FSxFileSystem.LustreMountName
      Description: FSx mount name
    
  S3BucketNameSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/s3_bucket_name"
      Type: String
      Value: !Ref S3Bucket
      Description: S3 bucket name

  EksClusterNameSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/eks_cluster_name"
      Type: String
      Value: !Ref EksControlPlane
      Description: EKS cluster name

  BatchJobQueueSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/batch_job_queue"
      Type: String
      Value: !Sub '${AWS::StackName}-fargate'
      Description: Batch job queue name

  BatchJobDefinitionSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/batch_job_definition"
      Type: String
      Value: !Sub '${AWS::StackName}-pythonfroms3'
      Description: Batch job definition

  Ros1BatchJobDefinitionSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/ros1_batch_job_definition"
      Type: String
      Value: !Sub '${AWS::StackName}-ros1-pythonfroms3'
      Description: Batch job definition

  DesktoppRoleArnSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/desktop_role_arn"
      Type: String
      Value: !GetAtt DesktopRole.Arn
      Description: Desktop role arn

  StepfunctionsRoleArnSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/stepfunctions_role_arn"
      Type: String
      Value: !GetAtt StepFunctionsRole.Arn
      Description: Step functions role arn

  GlueJobRoleArnSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/glue_job_role_arn"
      Type: String
      Value: !GetAtt GlueJobRole.Arn
      Description: Glue job role arn

  RedshiftClusterHostSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/redshift_cluster_host"
      Type: String
      Value: !GetAtt RedshiftServerlessWorkgroup.Workgroup.Endpoint.Address
      Description: Redshift serverless workgroup endpoint address
    
  RedshiftClusterUsernameSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/redshift_cluster_username"
      Type: String
      Value: !Ref RedshiftMasterUsername
      Description: Redshift master username

  RedshiftClusterDbnameSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/redshift_cluster_dbname"
      Type: String
      Value: !Ref RedshiftDatabaseName
      Description: Redshift database name

  RedshiftClusterPasswordSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/redshift_cluster_password"
      Type: String
      Value: !Ref RedshiftMasterUserPasswordSecret
      Description: Redshift master password

  RedshiftClusterRoleArnSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/redshift_cluster_role_arn"
      Type: String
      Value: !GetAtt RedshiftClusterRole.Arn
      Description: Redshift cluster role arn

  MskClusterArnSsm:
    Condition: MSKEnabled
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/msk_cluster_arn"
      Type: String
      Value: !Ref MSKCluster
      Description: MSK cluster arn

  EksNodeRolerArnSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/eks_node_role_arn"
      Type: String
      Value: !GetAtt EksNodeRole.Arn
      Description: EKS node role arn

  EksPodSARoleArnSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/eks_pod_sa_role_arn"
      Type: String
      Value: !GetAtt EksPodServiceAccountRole.Arn
      Description: EKS pod service account role arn

  ClusterAutoscalerImageTagSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/cluster_autoscaler_image_tag"
      Type: String
      Value: !Sub "v${KubernetesVersion}.0"
      Description: EKS Cluster autoscaler image tag

  ClusterAutoscalerSARoleArnSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/eks_cluster_autoscaler_role_arn"
      Type: String
      Value: !GetAtt EksClusterAutoscalerServiceAccountRole.Arn
      Description: EKS cluster autoscaler SA role arn

  DataRequestTableSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/data_request_table"
      Type: String
      Value: !Ref DataRequestTable
      Description: DynamoDB data request table name

Outputs:
  DesktopAMI:
    Description: Desktop AMI
    Value: !If 
        - OverrideAMI
        - !Ref UbuntuAMI
        - !FindInMap 
          - !Ref RosVersion
          - !Ref 'AWS::Region'
          - AMI
    Export:
      Name: !Join [ "-", [ !Ref "AWS::StackName", "DesktopAMI" ] ]
  DesktopInstanceProfile:
    Description: Desktop instance profile
    Value: !Ref DesktopInstanceProfile
    Export:
      Name: !Join [ "-", [ !Ref "AWS::StackName", "DesktopInstanceProfile" ] ]
  DesktopSubnet:
    Description: Desktop subnet
    Value: !Ref PublicSubnet1
    Export:
      Name: !Join [ "-", [ !Ref "AWS::StackName", "DesktopSubnet" ] ]
  DesktopVpc:
    Description: Desktop Vpc
    Value: !Ref Vpc
    Export:
      Name: !Join [ "-", [ !Ref "AWS::StackName", "Vpc" ] ]
  FSxId:
    Description: FSx for Luster file system id
    Value: !If [ FSxForLustreEnabled, !Ref FSxFileSystem, "null" ]
    Export:
      Name: !Join [ "-", [ !Ref "AWS::StackName", "FSxId" ] ]
  FSxMountName:
    Description: FSx for Luster mount name
    Value: !If [ FSxForLustreEnabled, !Sub "${FSxFileSystem.LustreMountName}", "null" ] 
    Export:
      Name: !Join [ "-", [ !Ref "AWS::StackName", "FSxMountName" ] ]
  EFSId:
    Description: EFS file system id
    Value: !Ref EFSFileSystem
    Export:
      Name: !Join [ "-", [ !Ref "AWS::StackName", "EFSId" ] ]
  EKSClusterName:
    Description: EKS cluster name
    Value: !Ref EksControlPlane
    Export:
      Name: !Join [ "-", [ !Ref "AWS::StackName", "EKSClusterName" ] ]
  RosVersion:
    Description: Ros Version
    Value: !Ref RosVersion
    Export:
      Name: !Join [ "-", [ !Ref "AWS::StackName", "RosVersion" ] ]
  KubectlVersion:
    Description: Kubectl Version
    Value: !Ref KubectlVersion
    Export:
      Name: !Join [ "-", [ !Ref "AWS::StackName", "KubectlVersion" ] ]